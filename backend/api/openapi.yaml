openapi: 3.0.0
info:
  title: OpenTutor API
  version: 1.0.0
  description: |
    The OpenTutor API, for use with OpenTutor the frontend to
    provide various OpenTutor features.
  contact:
    name: OpenTutor API Support
    email: nathanjodoin@my.unt.edu

paths:
  # Create new meeting
  /meeting:
    post:
      summary: Create a new meeting
      operationId: createMeeting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMeetingBody"
      responses:
        "201":
          description: Meeting created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meeting"

  /meetings:
    # Get user's scheduled meetings #
    get:
      summary: Get meetings for user
      operationId: getMeetings
      requestBody:
      responses:
        "200":
          description: Meetings returned
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Meeting"

  # User login
  /auth/login:
    post:
      summary: Log in as an existing user
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json: {}
          headers:
            x-session-token:
              schema:
                type: string
              description: The JWT associated with this authenticated session
        "400":
          description: User login failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # User register
  /auth/register:
    post:
      summary: Sign up as a new user
      operationId: userRegister
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserSignup"
      responses:
        "200":
          description: Sign up success
          content:
            application/json: {}
          headers:
            x-session-token:
              schema:
                type: string
              description: The JWT associated with this authenticated session
        "400":
          description: User signup request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Read or change a user
  /user/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User get request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    put:
      summary: Update user information
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "400":
          description: Update User request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User to be updated not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete user account, maybe via settings or moderation panel
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted
        "400":
          description: Delete user request malformed or denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User to be deleted not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Sign up as tutor
  /tutor:
    post:
      summary: Create Tutor Profile for User
      operationId: signUpAsTutor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tutor"
      responses:
        "201":
          description: Tutor signed up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "400":
          description: Create tutor request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Read or change tutor information
  /tutor/{tutorId}:
    get:
      summary: Get a tutor by ID
      operationId: getTutorById
      parameters:
        - name: tutorId
          in: path
          required: true
          description: The ID of the tutor to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tutor found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "400":
          description: Get tutor request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Tutor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rating/{userId}:
    get:
      summary: Get a user's rating by user ID, optionally filtering by usertype.
      operationId: getRatingById
      parameters:
        - name: userId
          in: path
          required: true
          description: The uuid of the user to get ratings for.
          schema:
            type: string
            format: uuid
        - name: userType
          in: query
          schema:
            type: string
            enum: [student, tutor]
          required: false
      responses:
        "200":
          description: Got Rating(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rating"
        "400":
          description: Post rating request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a rating
  /rating:
    post:
      summary: Post a rating
      operationId: postRating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rating"
      responses:
        "201":
          description: Rating posted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Post rating request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a message
  /message:
    post:
      summary: Creates a new message
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProtoMessage"

      responses:
        "201":
          description: Message created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  # Read or change a message
  /message/{messageId}:
    get:
      summary: Get a message by id
      operationId: getMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    put:
      summary: Update a message
      operationId: updateMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: Message updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete a message by id
      operationId: deleteMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Message deleted
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a message attachment
  /messageAttachment:
    post:
      summary: Create a new message attachment.
      operationId: createMessageAttachment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageAttachment"
      responses:
        "201":
          description: Attachment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageAttachment"

  /messageAttachment/{messageAttachmentId}:
    get:
      summary: Get an attachment by ID
      operationId: getMessageAttachmentById
      parameters:
        - name: messageAttachmentId
          in: path
          required: true
          description: The ID of the attachment to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Attachment found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageAttachment"
        "404":
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete an attachment by ID
      operationId: deleteMessageAttachmentById
      parameters:
        - name: messageAttachmentId
          in: path
          required: true
          description: The ID of the attachment to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Attachment deleted
        "404":
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /conversation:
    post:
      summary: Create a new conversation
      operationId: createConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        "201":
          description: Attachment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"

  /conversation/{conversationId}:
    get:
      summary: Get all userIds in the conversation via conversationId
      operationId: getUsersByConversationId
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation to fetch
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "200":
          description: Conversation found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
  /conversation/messages/{conversationId}:
    get:
      summary: Get all messages in the conversation via conversationId
      operationId: getMessagesByConversationId
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The ID of the conversation to fetch
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "200":
          description: Messages found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
  /conversation/user/{userId}:
    get:
      summary: Get all conversations the user is a member in
      operationId: getConversationsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Conversation/User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "200":
          description: Conversations found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid

components:
  securitySchemes:
    GitHubOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/login/oauth/authorize
          tokenUrl: https://github.com/login/oauth/access_token
          scopes:
            read:user: "Grants read access to the user's profile data on GitHub"
            repo: "Grants read and write access to public and private repositories"

    GoogleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: "Grants access to user's basic profile information"
            email: "Grants access to the user's email address"
            profile: "Grants access to the user's profile information"
  schemas:
    ErrorModel:
      type: object
      required:
        - message
        - code
      example:
        message: Resource not found.
        code: 400
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600

    User:
      type: object
      example:
        userId: 78fcb19e-5ae8-4c5f-a468-b08135a16235
        email: email@example.com
        firstName: Jacob
        lastName: Hochstetler
      description: Base User object containing shared details needed for all users.
      required:
        - userId
        - email
        - firstName
        - lastName
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        signedUpAt:
          type: string
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        accountLocked:
          type: boolean
        passwordHash:
          type: string

    UserLogin:
      type: object
      example:
        email: email@example.com
        password: N3v3rG0nn4G1veY0uUp!
      description: Payload for user logins
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserSignup:
      type: object
      example:
        email: email@example.com
        password: N3v3rG0nn4G1veY0uUp!
        firstName: Jacob
        lastName: Hochstetler
      description: Payload for user signups
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string

    Tutor:
      description: Extends user to include student specific information.
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - calendar
            - ratings
          example:
            userId: 78fcb19e-5ae8-4c5f-a468-b08135a16235
          properties:
            totalHours: # not sure if this is total hours worked or???
              type: integer
            skills:
              type: array
              items:
                type: string

    Rating:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ratingType:
          type: string
          enum: [tutor, student]
        userId:
          type: string
          format: uuid
        reviewerUserId:
          type: string
          format: uuid
        meetingId:
          type: string
          format: uuid
        ratings:
          type: object
          required:
            - overall
            - professionalism
            - knowledge
            - communication
            - punctuality
          properties: # Subject to change?
            professionalism:
              type: integer
              minimum: 1
              maximum: 5
            knowledge:
              type: integer
              minimum: 1
              maximum: 5
            communication:
              type: integer
              minimum: 1
              maximum: 5
            punctuality:
              type: integer
              minimum: 1
              maximum: 5
            overall:
              type: integer
              minimum: 1
              maximum: 5
        comment:
          type: string

      Meeting:
        type: object
        required:
          - id
          - tutorId
          - studentId
          - startAt
          - endAt
        properties:
          id:
            type: string
            format: uuid
          tutorId:
            type: string
            format: uuid
          studentId:
            type: string
            format: uuid
          startAt:
            type: string
            format: date-time
          endAt:
            type: string
            format: date-time
          zoomJoinLink:
            type: string
          zoomHostLink:
            type: string
      CreateMeetingBody:
        type: object
        properties:
          studentId:
            type: string
            format: uuid
          startAt:
            type: string
            format: date-time
          endAt:
            type: string
            format: date-time

    Calendar:
      type: object
      properties:
        meetings:
          type: array
          items:
            $ref: "#/components/schemas/Meeting"

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message.
        sentOn:
          type: string
          format: date-time
        originId:
          type: string
          format: uuid
          description: Unique identifier for the originID for the message.
        conversationId:
          type: string
          format: uuid
          description: Unique identifier for the conversation for the message.
        message:
          type: string
          description: Message content.
        MessageAttachments:
          type: array
          items:
            $ref: "#/components/schemas/MessageAttachment"
          description: Array of message attachments
      required:
        - id
        - sentOn
        - originId
        - conversationId
        - message

    ProtoMessage:
      type: object
      properties:
        originId:
          type: string
          format: uuid
          description: Unique identifier for the ID of the sender.
        conversationId:
          type: string
          format: uuid
          description: Unique identifier for the conversation.
        message:
          type: string
          description: Message content.
      required:
        - originId
        - conversationId
        - message

    MessageAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message the attachment belongs to.
        filename:
          type: string
          description: Name of the attachment.
        mimetype:
          type: string
          description: Mimetype of the attachment.
        url:
          type: string
          format: uri
          description: Source of the attachment.
      required:
        - id
        - filename
        - mimetype
        - url

    AvailableSkill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the skill.
        title:
          type: string
          description: title/name for the skill
        description:
          type: string
          description: Description for the skill
      required:
        - id
        - title
        - description

    TutorSkill:
      allOf:
        - $ref: "#/components/schemas/AvailableSkill"
        - type: object
          properties:
            validated:
              type: boolean
              description: If the skill is validated
          required:
            - validated

    Question:
      type: object
      properties:
        question:
          type: string
          description: The literal question being asked.
        valid:
          type: string
          description: The valid answer to the question
        invalid:
          type: array
          items:
            type: string

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        users:
          type: array
          items:
            type: string
            format: uuid
security:
  - GitHubOAuth:
      - read:user
  - GoogleOAuth:
      - openid
