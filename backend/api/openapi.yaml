openapi: 3.1.0
info:
  title: OpenTutor API
  version: 1.0.0
  summary: The OpenTutor application API.
  description: |
    The OpenTutor API, for use with OpenTutor the frontend to
    provide various OpenTutor features.
  contact:
    name: OpenTutor API Support
    email: nathanjodoin@my.unt.edu

# We don't currently have any servers.
servers: []

paths:
  # Create new meeting #
  /meeting:
    post:
      summary: Create a new meeting
      operationId: createMeeting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meeting"
      responses:
        "201":
          description: Meeting created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meeting"

  # Read or change a meeting #
  /meeting/{meetingId}:
    get:
      summary: Get a meeting by ID
      operationId: getMeetingById
      parameters:
        - name: meetingId
          in: path
          required: true
          description: The ID of the meeting to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Meeting found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meeting"
        "404":
          description: Meeting not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting not found
    put:
      summary: Update meeting information
      operationId: updateMeetingById
      parameters:
        - name: meetingId
          in: path
          required: true
          description: The ID of the meeting to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meeting"
      responses:
        "200":
          description: Meeting updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meeting"
        "404":
          description: Meeting not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting not found
    delete:
      summary: Delete a meeting by ID
      operationId: deleteMeetingById
      parameters:
        - name: meetingId
          in: path
          required: true
          description: The ID of the meeting to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Meeting deleted
        "404":
          description: Meeting not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting not found

  # User sign up #
  /user:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  # Read or change a user #
  /user/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
    put:
      summary: Update user information
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
    delete:
      summary: Delete user account, maybe via settings or moderation panel
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  # Sign up as tutor #
  /tutor:
    post:
      summary: Sign up as a tutor
      operationId: signUpAsTutor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tutor"
      responses:
        "201":
          description: Tutor signed up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"

  # Read or change tutor information #
  /tutor/{tutorId}:
    get:
      summary: Get a tutor by ID
      operationId: getTutorById
      parameters:
        - name: tutorId
          in: path
          required: true
          description: The ID of the tutor to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tutor found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "404":
          description: Tutor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tutor not found

  # Post a rating #
  /rating:
    post:
      summary: Post a rating
      operationId: postRating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rating"
      responses:
        "201":
          description: Rating posted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"

components:
  schemas:
    Tutor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        totalHours:
          type: integer
        signedUpAt:
          type: string
          format: date-time
      required:
        - id
    Meeting:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tutorId:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
    Rating:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ratingType:
          type: string
          enum: [tutor, student]
        userId:
          type: string
          format: uuid
        reviewerUserId:
          type: string
          format: uuid
        meetingId:
          type: string
          format: uuid
        ratings:
          type: object
          properties: # Subject to change?
            professionalism:
              type: integer
            knowledge:
              type: integer
            communication:
              type: integer
            punctuality:
              type: integer
            overall:
              type: integer
        comment:
          type: string

security:
