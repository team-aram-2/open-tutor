openapi: 3.0.0
info:
  title: OpenTutor API
  version: 1.0.0
  description: |
    The OpenTutor API, for use with OpenTutor the frontend to
    provide various OpenTutor features.
  contact:
    name: OpenTutor API Support
    email: nathanjodoin@my.unt.edu

paths:
  # Create new meeting
  /meeting:
    post:
      summary: Create a new meeting
      operationId: createMeeting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMeetingBody"
      responses:
        "201":
          description: Meeting created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meeting"

  /meetings:
    # Get user's scheduled meetings #
    get:
      summary: Get meetings for user
      operationId: getMeetings
      responses:
        "200":
          description: Meetings returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meeting"

  /meeting/{meetingId}/finalize:
    post:
      summary: Finalize a meeting
      operationId: finalizeMeeting
      parameters:
        - name: meetingId
          in: path
          required: true
          description: The ID of the meeting
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Meeting finalized

  # User login
  /auth/login:
    post:
      summary: Log in as an existing user
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json: {}
          headers:
            x-session-token:
              schema:
                type: string
              description: The JWT associated with this authenticated session
        "400":
          description: User login failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # User register
  /auth/register:
    post:
      summary: Sign up as a new user
      operationId: userRegister
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserSignup"
      responses:
        "200":
          description: Sign up success
          content:
            application/json: {}
          headers:
            x-session-token:
              schema:
                type: string
              description: The JWT associated with this authenticated session
        "400":
          description: User signup request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Read or change a user
  /user/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User get request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    put:
      summary: Update user information
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tutor"
        "400":
          description: Update User request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User to be updated not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete user account, maybe via settings or moderation panel
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted
        "400":
          description: Delete user request malformed or denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: User to be deleted not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # change a user role, admin only
  /user/{userId}/role:
    put:
      summary: Update user information
      operationId: updateUserRole
      security:
        - BearerAuth: [admin]
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role_mask:
                  type: integer
                  description: "Uint16 Bitmask representing the user's new roles"
              required:
                - role_mask

  /billing_portal:
    get:
      summary: Redirects to your Stripe customer billing portal
      operationId: viewBillingPortal
      responses:
        "301":
          description: "Portal redirect success"
        "400":
          description: "Error redirecting to billing portal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /tutor_id_verification:
    get:
      summary: Allows tutors to verify their identity with Stripe
      operationId: tutorIdVerification
      responses:
        "301":
          description: "Portal redirect success"
        "400":
          description: "Error redirecting to id verification"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Sign up as tutor
  /tutor:
    post:
      summary: Create Tutor Profile for User
      operationId: signUpAsTutor
      requestBody:
        required: false
        content:
          application/json: {}
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Tutor signed up
        "400":
          description: Create tutor request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    get:
      summary: Search All Tutors
      operationId: getTutors
      parameters:
        - name: pageSize
          in: query
          required: true
          description: The ID of the tutor to get
          schema:
            type: integer
        - name: pageIndex
          in: query
          required: true
          description: The ID of the tutor to get
          schema:
            type: integer
        - name: minRating
          in: query
          required: false
          description: The minimum rating of tutor to get.
          schema:
            type: number
        - name: skillsInclude
          in: query
          required: false
          description: The skills a tutor should have.
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: Found tutors.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    info:
                      $ref: "#/components/schemas/Tutor"
                    ratingScores:
                      $ref: "#/components/schemas/RatingScores"
                    ratingCount:
                      type: integer
        "400":
          description: Get tutor request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Tutors not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Read or change tutor information
  /tutor/{tutorId}:
    get:
      summary: Get a tutor by ID
      operationId: getTutorById
      parameters:
        - name: tutorId
          in: path
          required: true
          description: The ID of the tutor to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tutor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    $ref: "#/components/schemas/Tutor"
                  ratingScores:
                    $ref: "#/components/schemas/RatingScores"
                  ratingCount:
                    type: integer
        "400":
          description: Get tutor request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Tutor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /skills:
    get:
      summary: Retrieve a list of skills.
      operationId: getAllSkills
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful skill GET.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TutorSkill"
        "400":
          description: GET skill info request malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: GET skill info request denied, bearer auth required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: NO skills found matching query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    post:
      summary: Create new tutor skill.
      operationId: createSkill
      security:
        - BearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TutorSkill"
      responses:
        "201":
          description: Successful skill created/updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TutorSkill"
        "400":
          description: POST skill info request malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: PUT skill info request denied, bearer auth required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /skills/{id}:
    get:
      summary: Retrieve skill info for a specific skill by ID.
      operationId: getSkill
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The skill ID to get information about.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful info GET.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TutorSkill"
        "400":
          description: Get skill info request malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: Get skill info request denied, bearer auth required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    put:
      summary: Update tutor skill.
      operationId: UpdateSkill
      security:
        - BearerAuth: [admin]
      parameters:
        - name: id
          in: path
          required: true
          description: The skill ID to get information about.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TutorSkill"
      responses:
        "201":
          description: Successful skill created/updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TutorSkill"
        "400":
          description: POST skill info request malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: GET skill info request denied, bearer auth required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Skill with ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete a specific skill by ID.
      operationId: deleteSkill
      security:
        - BearerAuth: [admin]
      parameters:
        - name: id
          in: path
          required: true
          description: The skill ID to delete.
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Skill deleted successfully.
        "400":
          description: Bad request, skill ID is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: Unauthorized, admin access required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /skills/{id}/quiz:
    get:
      summary: Retrieve a bank of questions for a given skill. The number of questions is dependent on the backend configuration.
      operationId: getSkillQuiz
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The skill ID for which to get a quiz bank.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful quiz get.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizAttempt"
        "400":
          description: Get skill info request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "409":
          description: Quiz GET denied because Tutor has skill already.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /skills/{id}/quiz/submit:
    post:
      summary: Submit answers for a quiz attempt.
      operationId: submitSkillQuiz
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuizAttempt"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the skill.
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Successful quiz submission.
          content:
            application/json:
              schema:
                type: object
                properties:
                  grade:
                    type: integer
                    minimum: 0
                    maximum: 100
                    description: The percetage grade of the quiz attempt.
                  passed:
                    type: boolean
                    description: True if the skill quiz passed.
        "400":
          description: Get skill info request malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "401":
          description: Get skill info request denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "409":
          description: Skill quiz POST denied because tutor already has skill.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /categories/academic:
    get:
      summary: Get all academic categories
      description: Returns a list of all available academic categories.
      operationId: getCategories
      tags:
        - Academic Categories
      responses:
        "200":
          description: A list of academic categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AcademicCategory"
        "500":
          description: Internal server error.

    post:
      summary: Create a new academic category
      description: Adds a new academic category to the system.
      operationId: createCategory
      tags:
        - Academic Categories
      security:
        - BearerAuth: [admin] # Requires admin permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcademicCategoryCreate"
      responses:
        "201":
          description: Academic category successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademicCategory"
        "400":
          description: Invalid request payload.
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.

  /categories/academic/{id}:
    get:
      summary: Get details of a specific academic category
      description: Fetches the details of a specific academic category by ID.
      operationId: getCategory
      tags:
        - Academic Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Details of the academic category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademicCategory"
        "404":
          description: Category not found.
        "500":
          description: Internal server error.

    put:
      summary: Update an academic category
      description: Updates an existing academic category by ID.
      operationId: updateCategory
      tags:
        - Academic Categories
      security:
        - BearerAuth: [admin] # Requires admin permission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcademicCategoryCreate"
      responses:
        "200":
          description: Academic category successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcademicCategory"
        "400":
          description: Invalid request payload.
        "401":
          description: Unauthorized.
        "404":
          description: Category not found.
        "500":
          description: Internal server error.
    delete:
      summary: Delete an academic category
      description: Deletes an academic category by ID.
      operationId: deleteCategory
      tags:
        - Academic Categories
      security:
        - BearerAuth: [admin] # Requires admin permission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Academic category successfully deleted.
        "401":
          description: Unauthorized.
        "404":
          description: Category not found.
        "500":
          description: Internal server error.

  /rating/{userId}:
    get:
      summary: Get a user's rating by user ID, optionally filtering by usertype.
      operationId: getRatingById
      parameters:
        - name: userId
          in: path
          required: true
          description: The uuid of the user to get ratings for.
          schema:
            type: string
            format: uuid
        - name: userType
          in: query
          schema:
            type: string
            enum: [student, tutor]
          required: false
      responses:
        "200":
          description: Got Rating(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rating"
        "400":
          description: Post rating request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a rating
  /rating:
    post:
      summary: Post a rating
      operationId: postRating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rating"
      responses:
        "201":
          description: Rating posted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Post rating request malformed or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a message
  /message:
    post:
      summary: Creates a new message
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: Message created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  # Read or change a message
  /message/{messageId}:
    get:
      summary: Get a message by id
      operationId: getMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    put:
      summary: Update a message
      operationId: updateMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: Message updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete a message by id
      operationId: deleteMessageById
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Message deleted
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  # Post a message attachment
  /messageAttachment:
    post:
      summary: Create a new message attachment.
      operationId: createMessageAttachment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageAttachment"
      responses:
        "201":
          description: Attachment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageAttachment"

  /messageAttachment/{messageAttachmentId}:
    get:
      summary: Get an attachment by ID
      operationId: getMessageAttachmentById
      parameters:
        - name: messageAttachmentId
          in: path
          required: true
          description: The ID of the attachment to get
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Attachment found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageAttachment"
        "404":
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
    delete:
      summary: Delete an attachment by ID
      operationId: deleteMessageAttachmentById
      parameters:
        - name: messageAttachmentId
          in: path
          required: true
          description: The ID of the attachment to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Attachment deleted
        "404":
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

    GitHubOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/login/oauth/authorize
          tokenUrl: https://github.com/login/oauth/access_token
          scopes:
            read:user: "Grants read access to the user's profile data on GitHub"
            repo: "Grants read and write access to public and private repositories"

    GoogleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: "Grants access to user's basic profile information"
            email: "Grants access to the user's email address"
            profile: "Grants access to the user's profile information"
  schemas:
    ErrorModel:
      type: object
      required:
        - message
        - code
      example:
        message: Resource not found.
        code: 400
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600

    User:
      type: object
      example:
        userId: 78fcb19e-5ae8-4c5f-a468-b08135a16235
        email: email@example.com
        firstName: Jacob
        lastName: Hochstetler
      description: Base User object containing shared details needed for all users.
      required:
        - userId
        - firstName
        - lastName
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        signedUpAt:
          type: string
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        accountLocked:
          type: boolean
        passwordHash:
          type: string

    UserLogin:
      type: object
      example:
        email: email@example.com
        password: N3v3rG0nn4G1veY0uUp!
      description: Payload for user logins
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        rememberLogin:
          type: boolean

    UserSignup:
      type: object
      example:
        email: email@example.com
        password: N3v3rG0nn4G1veY0uUp!
        firstName: Jacob
        lastName: Hochstetler
      description: Payload for user signups
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string

    Tutor:
      description: Extends user to include student specific information.
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          example:
            userId: 78fcb19e-5ae8-4c5f-a468-b08135a16235
          properties:
            totalHours: # total hours worked
              type: integer
            skills:
              type: array
              items:
                type: string

    RatingScores:
      type: object
      required:
        - overall
        - professionalism
        - knowledge
        - communication
        - punctuality
      properties: # Subject to change?
        professionalism:
          type: integer
          minimum: 1
          maximum: 5
        knowledge:
          type: integer
          minimum: 1
          maximum: 5
        communication:
          type: integer
          minimum: 1
          maximum: 5
        punctuality:
          type: integer
          minimum: 1
          maximum: 5
        overall:
          type: integer
          minimum: 1
          maximum: 5

    Rating:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ratingType:
          type: string
          enum: [tutor, student]
        userId:
          type: string
          format: uuid
        reviewerUserId:
          type: string
          format: uuid
        meetingId:
          type: string
          format: uuid
        scores:
          type: object
          $ref: "#/components/schemas/RatingScores"
        comment:
          type: string

    Meeting:
      type: object
      required:
        - id
        - tutorId
        - studentId
        - startAt
        - endAt
      properties:
        id:
          type: string
          format: uuid
        tutorId:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        zoomJoinLink:
          type: string
        zoomHostLink:
          type: string

    CreateMeetingBody:
      type: object
      properties:
        studentId:
          type: string
          format: uuid
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time

    Calendar:
      type: object
      properties:
        meetings:
          type: array
          items:
            $ref: "#/components/schemas/Meeting"

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message.
        sentOn:
          type: string
          format: date-time
        originId:
          type: string
          format: uuid
          description: Unique identifier for the originID for the message.
        recipientId:
          type: string
          format: uuid
          description: Unique identifier for the recipient of the message.
        message:
          type: string
          description: Message content.
        MessageAttachments:
          type: array
          items:
            $ref: "#/components/schemas/MessageAttachment"
          description: Array of message attachments
      required:
        - id
        - sentOn
        - originId
        - recipientId
        - message

    MessageAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message the attachment belongs to.
        filename:
          type: string
          description: Name of the attachment.
        mimetype:
          type: string
          description: Mimetype of the attachment.
        url:
          type: string
          format: uri
          description: Source of the attachment.
      required:
        - id
        - filename
        - mimetype
        - url

    SkillCategory:
      type: string
      description: Academic Categories for Skills."

    TutorSkill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the skill.
        category:
          type: string
          description: The UUID of the academic category of the skill.
        title:
          type: string
          description: The name of the skill.
        description:
          type: string
          description: Description for the skill.
        questions:
          type: array
          description: All possible quiz questions for a skill.
          items:
            $ref: "#/components/schemas/Question"
        tutorHasSkill:
          type: boolean
          description: If the skill is validated for a specific tutor.
      required:
        - id
        - title
        - description

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
          description: The question being asked.
        answers:
          type: array
          description: The list of all possible answers.
          items:
            type: string
        correctAnswers:
          description: The list of all correct answers.
          type: array
          items:
            type: string
        selectedAnswer:
          type: string
      required:
        - id
        - question
        - answers

    Quiz:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"

    QuizAttempt:
      type: object
      properties:
        attemptId:
          type: string
          format: uuid
        tutorId:
          type: string
          format: uuid
        skillId:
          type: string
          format: uuid
        quiz:
          type: object
          $ref: "#/components/schemas/Quiz"
        passed:
          type: boolean
        attemptedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
      required:
        - attemptId
        - tutorId
        - skillId
        - quiz

    AcademicCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the academic category.
        name:
          type: string
          description: Name of the academic category.
      required:
        - id
        - name

    AcademicCategoryCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the academic category.
      required:
        - name
